import org.gradle.internal.os.OperatingSystem

import java.text.SimpleDateFormat

// include build receipt plugin and accept its license
plugins {
  id 'com.gradle.build-receipt' version '1.0'
}

buildReceiptLicense { agreementUrl = "https://gradle.com/terms-of-service"; agree = "yes" }

// define the group of the GAV
group = 'com.gradleware.tooling'

// define the version of the GAV
version = file('version.txt').text.trim()

// in case this is not a final release, add a timestamp to the version for unique identification of 'snapshot' versions
if (!project.hasProperty('build.type') || project.property('build.type') != 'release') {
  if (project.hasProperty('build.invoker') && project.property('build.invoker') == 'ci') {
    // in case of CI builds, add the full date and time to the version timestamp
    version = version + '-' + new SimpleDateFormat("yyyyMMddkkmmssZ").format(new Date())
  } else {
    // in case of local builds, do not add the time to the version timestamp to ensure incremental updates apply when building locally
    version = version + '-' + new SimpleDateFormat("yyyyMMdd").format(new Date())
  }
}

// calculate the bundle version, and use a more precise date qualifier when built on a CI server
if (project.hasProperty('build.invoker') && project.property('build.invoker') == 'ci') {
  ext.bundleVersionQualifier = 'v' + new SimpleDateFormat("yyyyMMddkkmm").format(new Date())
} else {
  ext.bundleVersionQualifier = 'v' + new SimpleDateFormat("yyyyMMdd").format(new Date())
}
ext.bundleVersion = getBundleVersion(version) + '.' +  bundleVersionQualifier

description = "Root project of the Commons project of the Gradle Tooling Platform."

subprojects {

  group = rootProject.group
  version = rootProject.version

  // add required repositories for external dependencies
  repositories {
    jcenter()
    maven {
      name 'gradle-public-snapshots'
      url gradlePublicSnapshotsRepositoryUrl
    }
  }

  // fail eagerly on version conflict (includes transitive dependencies) and enforce certain dependency versions
  configurations.all {
    resolutionStrategy {
      failOnVersionConflict()

      forcedModules = [
          "org.slf4j:slf4j-api:$slf4jVersion",            // logback-classic uses logback 1.7.6
          "org.hamcrest:hamcrest-core:1.3",               // junit uses hamcrest 1.1
          "org.codehaus.groovy:groovy-all:$groovyVersion" // spock uses groovy 2.4.1
      ]
    }
  }

  // apply Java plugin (production code) and Groovy plugin (test code)
  apply plugin: 'groovy'

  // make sure it compiles and runs with Java 6
  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  // 1) fork the compilation
  // 2) report all compiler warnings
  // 3) on Mac OS, in addition
  //    a) use the correct compiler version (rather than just working with the compatibility flags)
  //    b) convert all compiler warnings to errors
  tasks.withType(AbstractCompile).all {
    options.compilerArgs << '-Xlint:all'
    options.fork = true
    if (OperatingSystem.current().isMacOsX()) {
      options.compilerArgs << '-Werror'
      options.forkOptions.executable = "/usr/libexec/java_home -v $targetCompatibility".execute().text.trim() + "/bin/javac"
    }
  }

  // make sure the main resources folder is always generated in the build directory, otherwise 'compileTestGroovy' issues a warning
  task mainResourcesDir() {
    outputs.dir sourceSets.main.output.resourcesDir
    doLast { sourceSets.main.output.resourcesDir.mkdirs() }
  }
  processResources.dependsOn mainResourcesDir

  // bundle sources
  task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
  }

  // fail for Javadoc errors (there is no way to make it fail on Javadoc warnings)
  javadoc.failOnError = true
  if (JavaVersion.current().isJava8Compatible()) {
    javadoc.options.addStringOption('Xdoclint:all,-html', '-quiet')
  }

  // generate javadoc as part of the build once all tests have passed
  build.dependsOn javadoc
  javadoc.shouldRunAfter check

  // cannot apply publishing plugin to all sub-projects here due to limitations in that plugin
  // apply plugin: 'maven-publish'

  // allow to run tests in parallel and set bigger PermGen for executors
  tasks.withType(Test).all {
      maxParallelForks = 4
      jvmArgs '-XX:MaxPermSize=1024m'
  }

  // allow to
  //  - run cross-version tests in 'toolingmodel' sub-project by mapping the relevant system property from the project properties to the forked test process
  //  - run cross-version tests in embedded mode in 'toolingmodel' sub-project by passing the relevant system property from the project properties to the forked test process
  if (path in [':toolingmodel']) {
    tasks.withType(Test).all {
      def propertyKeyVersions = 'com.gradleware.tooling.integtest.versions'
      if (project.properties.containsKey(propertyKeyVersions)) {
        systemProperty propertyKeyVersions, project.properties.get(propertyKeyVersions)
      }
      def propertyKeyEmbedded = 'com.gradleware.tooling.integtest.embedded'
      if (project.properties.containsKey(propertyKeyEmbedded)) {
        systemProperty propertyKeyEmbedded, project.properties.get(propertyKeyEmbedded)
      }
    }
  }

  if (path in [':toolingmodel', ':toolingclient', 'toolingutils']) {
    sourceSets {
      main {
        resources {
          srcDir 'src/main/resources'
          srcDir { rootProject.file('gradle/license') }
        }
      }
    }
  }

  // apply Checkstyle plugin, mainly to ensure copyright and javadoc is present
  apply plugin: 'checkstyle'

  // share checkstyle config across all sub-projects
  def checkstyleConfigDir = "$rootDir/gradle/config/checkstyle"
  tasks.withType(Checkstyle).all {
    configFile = "$checkstyleConfigDir/checkstyle.xml" as File
    configProperties = ['checkstyleConfigDir': checkstyleConfigDir]
    inputs.file "$checkstyleConfigDir/suppressions.xml" as File
  }

  // if defined, add OSGi manifest to the jars
  def osgiManifest = project.file('META-INF/MANIFEST.MF')
  if (osgiManifest.exists()) {
    jar.manifest {
      from(osgiManifest) {
        eachEntry { entry ->
          if (entry.key == 'Bundle-Version') {
              entry.value = bundleVersion
          }
        }
      }
    }
  }
}

// tag the HEAD of the current branch and push the new tag
task tag {
  doLast {
    // create tag
    execCommand "git", "tag", "-a", "v$version", "-m", "Create tag v$version"
    // push tag
    execCommand "git", "push", "origin", "v$version"
  }
}

// bump up the minor version in the version file and commit/push the change
task minorRelease {
  dependsOn tag
  doLast {
    // update version file
    def nextVersion
    def matcher = version =~ "^(\\d+)\\.(\\d+)(.*)"
    if (matcher.find()) {
      def nextMinorVersion = Integer.parseInt(matcher.group(2)) + 1
      nextVersion = matcher.group(1) + "." + nextMinorVersion + matcher.group(3)
      file('version.txt').text = "$nextVersion${System.getProperty('line.separator')}"
    } else {
      throw new IllegalStateException("Unparseable version: $version.")
    }
    // add/commit change
    execCommand "git", "commit", "-a", "-m", "Increase minor version to $nextVersion"
    // push change
    execCommand "git", "push", "origin", "master"
  }
}

private ExecResult execCommand(Object... args) {
  exec {
    commandLine args
  }
}

def getBundleVersion(String version) {
  def matcher = version =~ /(\d+).(\d+)(?:-.*|\.(\d+)(?:-.*)?)?/
  if (matcher.matches()) {
    def major = matcher.group(1)
    def minor = matcher.group(2)
    def service = matcher.group(3)
    if (service == null) { service = "0"
      return "$major.$minor.$service"
    } else {
      return "NIL"
    }
  }
}
